@using BlazorUI.Models
@using BlazorUI.Services
@using System.Text.Json
@inject HttpClient Http
@inject FileUtil _fileUtil

<h3>Создание картинок</h3>

<div class="container p-0">
    <div class="d-flex flex-row mb-2">
        <div>Ссылка на изображение:</div>
        <input class="form-control form-control-sm" @bind=_rawImageUrl placeholder="https://..." />
        <button class="btn btn-outline-primary ml-2" @onclick=OnLoadClicked>Загрузить</button>
    </div>
    
    @if (!string.IsNullOrEmpty(_currentImageUrl))
    {
        <div class="d-flex flex-row mb-2">
            <div>Текст с заданием для игрока</div>
            <input class="form-control form-control-sm" @bind=_currentTextForUser />
        </div>


        <div class="d-flex flex-row mb-2 @(_pointCreationMode ? "visible" : "invisible")">
            <div>Создание точки: кликните в нужном месте на картинке...</div>
        </div>           
        
        <div class="d-flex flex-row @(_pointCreationMode ? "invisible" : "visible")">
            <button class="btn btn-outline-primary" @onclick=OnStartAddingButtonClicked>Добавить точку на картинке</button>
            <button disabled=@(!_points.Any()) class="btn btn-outline-warning mx-2" @onclick=OnResetClicked>Удалить все точки</button>
                   
            @if (_selectedPoint != null)
            {
                <div class="form-group">
                    <label for="formControlRange">Разброс:</label>
                    <input type="range" min=5 max=40 class="form-control-range" id="formControlRange" @bind=_currentAccuracyPercent @bind:event="oninput">
                </div>
            }
        </div>        

        <div class="row" style="height: 500px">
            <div class="col">
                <div style="position: relative">
                    <img 
                        class="wrapped-image"
                        style="position: absolute; height: 500px; width: 700px"
                        src="@_currentImageUrl"
                        @onclick=OnImageClicked
                    />
                    @foreach(var point in _points)
                    {
                        <div 
                            @onclick="(() => OnPointClick(point))"
                            style="position: absolute;
                            background-color: @(_selectedPoint == point ? "#ff0000b3" : "#d1d1d1b3");
                            border-radius: @(point.Accuracy * _imgWidth)px;
                            width: @(point.Accuracy * _imgWidth)px;
                            height: @(point.Accuracy * _imgWidth)px; 
                            top: @(point.Y * _imgHeight - point.Accuracy * _imgWidth / 2)px; 
                            left: @(point.X * _imgWidth - point.Accuracy * _imgWidth / 2)px;"
                        >
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <button class="btn btn-outline-primary mt-2" @onclick=OnSaveClicked>Сохранить</button>
        </div>
    }
</div>

@code {
    // TODO:
    string _rawImageUrl = "/imgs/2.jpg"; //string.Empty;
    string _currentImageUrl = string.Empty;
    string _currentTextForUser = string.Empty;
    List<EditingSpot> _points = new();
    //EditingSpot? _creatingPoint;
    EditingSpot? _selectedPoint;
    bool _pointCreationMode = false;
    decimal _defaultAccuracy = 0.1m;
    int _imgHeight = 500;
    int _imgWidth = 700;
    int _currentAccuracyPercent
    {
        get => (int)(_selectedPoint?.Accuracy * 100 ?? 0);
        set
        {
            if (_selectedPoint != null)
            {
                _selectedPoint.Accuracy = value / 100m;
            }
        }
    }
    //int _creatingAccuracy = 140;
    //int CreatingAccuracy
    //{
    //    get => _creatingAccuracy;
    //    set
    //    {
    //        _creatingAccuracy = value;
    //        if (_creatingPoint != null)
    //        {
    //            _creatingPoint.AccuracyPx = _creatingAccuracy;
    //        }
    //    }
    //}

    void OnImageClicked(MouseEventArgs e) => Call.AsSafe(() =>
    {
        if (string.IsNullOrEmpty(_currentImageUrl))
            return;

        if (_pointCreationMode)
        {
            var srcCoordinateX = (decimal)e.OffsetX;
            var srcCoordinateY = (decimal)e.OffsetY;
            var creatingPoint = new EditingSpot(srcCoordinateX / _imgWidth, srcCoordinateY / _imgHeight, _defaultAccuracy);
            _points.Add(creatingPoint);
            _pointCreationMode = false;
            _selectedPoint = creatingPoint;
        }
    });

    void OnLoadClicked() => Call.AsSafe(() =>
    {
        _currentImageUrl = _rawImageUrl;
    });

    void OnStartAddingButtonClicked() => Call.AsSafe(() =>
    {
        _selectedPoint = null;
        _pointCreationMode = true;
    });

    void OnSavePointButtonClicked() => Call.AsSafe(() =>
    {
        _selectedPoint = null;
        _pointCreationMode = false;
    });

    void OnResetClicked() => Call.AsSafe(() =>
    {
        _selectedPoint = null;
        _points.Clear();
    });

    void OnPointClick(EditingSpot point) => Call.AsSafe(() =>
    {
        if (_selectedPoint == point)
        {
            _selectedPoint = null;
            return;
        }
        _selectedPoint = point;
    });

    void OnSaveClicked() => Call.AsSafe(async () =>
    {
        var text = JsonSerializer.Serialize(_points, options: new JsonSerializerOptions
        {
            WriteIndented = true
        });
        await _fileUtil.SaveAs("text.txt", text);
    });
}
