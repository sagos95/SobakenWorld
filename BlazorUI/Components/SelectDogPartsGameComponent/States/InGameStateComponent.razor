@using BlazorUI.Models
@using BlazorUI.Services

<div class="container">
    <div class="row">
        Text
    </div>
    <div class="row">
        <div class="col">
            @if (_currentImageInfo != null)
            {
                <img 
                    class="wrapped-image"
                    src="@_currentImageInfo.ImageUrl"
                    @onclick=OnImageClicked
                />
            }
        </div>
    </div>
    @_resultText
</div>

@code {
    ImageSpotInfo? _currentImageInfo;
    string _resultText = string.Empty;

    //[Inject]
    //public ImageSpotsFactory MyService { get; set; } = default!;

    [Parameter]
    public MainComponent MainComponentRef { get; set; } = default!;

    [Parameter]
    public ImageSearchGameEngine GameEngine { get; set; } = default!;

    protected override Task OnParametersSetAsync() => Call.AsSafeAsync(() 
        => SetNextImage());

    void OnImageClicked(MouseEventArgs e) => Call.AsSafe(async () =>
    {
        if (_currentImageInfo == null)
            return;

        if (_currentImageInfo.IsThisAGoodSpot((int)e.OffsetX, (int)e.OffsetY))
        {
            await SetNextImage();
        }
        else
        {
            // todo: user error warning
        }
    });
    
    async Task SetNextImage() 
    {
        var currentImageInfo = GameEngine.GetNextRandomImageInfo();
        if (currentImageInfo != null)
        {
            _currentImageInfo = currentImageInfo;
        }
        else
        {
            await MainComponentRef.SetGameState(MainComponent.GameStates.Finish);
        }
    }
}
